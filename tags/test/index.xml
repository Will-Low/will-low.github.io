<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on Will Springer - Security Developer</title>
    <link>https://www.willspringersec.com/tags/test/</link>
    <description>Recent content in test on Will Springer - Security Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2022–⁠ Will Springer</copyright>
    <lastBuildDate>Wed, 30 Mar 2022 18:41:48 -0700</lastBuildDate><atom:link href="https://www.willspringersec.com/tags/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inclusive Language in Unit Testing</title>
      <link>https://www.willspringersec.com/posts/inclusive-language-in-unit-testing/</link>
      <pubDate>Wed, 30 Mar 2022 18:41:48 -0700</pubDate>
      
      <guid>https://www.willspringersec.com/posts/inclusive-language-in-unit-testing/</guid>
      <description>When unit testing, it is common to leverage &amp;ldquo;test doubles&amp;rdquo;, which are pieces of code intended to replace references to production code in your tests. This can ease the burden of setting up your test and better isolate the system-under test from surrounding components.
One type of test double has historically been referred to as a &amp;ldquo;dummy&amp;rdquo;, which is a test double that is included to ensure compliance with the API, but is not leveraged for anything.</description>
    </item>
    
  </channel>
</rss>
